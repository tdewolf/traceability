<html>
    <head>
        <meta name="decorator" content="none" />
        <base href="https://compass.collibra.com" />
        <title>Traceability diagram FAQ</title>
        <style>
            body, p, td, table, tr, .bodytext, .stepfield {
	            font-family: Verdana, arial, sans-serif;
            }
            .panel {
                margin: 10px;
                padding: 10px;
                border: 1px solid #999;
                background-color: #f0f0f0;
            }
            .noteMacro { border-style: solid; border-width: 1px; border-color: #F0C000; background-color: #FFFFCE; text-align:left;}
            .warningMacro { border-style: solid; border-width: 1px; border-color: #c00; background-color: #fcc; text-align:left;}
            .infoMacro { border-style: solid; border-width: 1px; border-color: #3c78b5; background-color: #D8E4F1; text-align:left;}
            .tipMacro { border-style: solid; border-width: 1px; border-color: #090; background-color: #dfd; text-align:left;}
            .informationMacroPadding { padding: 5px 0 0 5px; }

            table.infoMacro td, table.warningMacro td, table.tipMacro td, table.noteMacro td, table.sectionMacro td {
                border: none;
            }

            .grid {
                margin: 2px 0px 5px 0px;
                border-collapse: collapse;
            }
            .grid th  {
                border: 1px solid #ccc;
                padding: 2px 4px 2px 4px;
                background: #f0f0f0;
                text-align: center;
            }
            .grid td  {
                border: 1px solid #ccc;
                padding: 3px 4px 3px 4px;
            }
        </style>
    </head>

    <body style="background-color: white; padding: 10px;">
        <h1>Traceability diagram FAQ</h1>
        &lt;p&gt;&lt;style type=&#39;text/css&#39;&gt;/*&lt;![CDATA[*/
div.rbtoc1475472654173 {padding: 0px;}
div.rbtoc1475472654173 ul {list-style: disc;margin-left: 0px;}
div.rbtoc1475472654173 li {margin-left: 0px;padding-left: 0px;}

/*]]&gt;*/&lt;/style&gt;&lt;div class=&#39;toc-macro rbtoc1475472654173&#39;&gt;
&lt;ul class=&#39;toc-indentation&#39;&gt;
&lt;li&gt;&lt;a href=&#39;#TraceabilitydiagramFAQ-HowdoesDGCselectthecolorofanode?&#39;&gt;How does DGC select the color of a node?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;#TraceabilitydiagramFAQ-WhydoIseesomanydiagramviewsinthedropdownlist.Aretheyallapplicabletomyasset?&#39;&gt;Why do I see so many diagram views in the dropdown list. Are they all applicable to my asset? &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;#TraceabilitydiagramFAQ-HowdoesDGCdecidewhichedgesandnodestoincludeinthediagram?&#39;&gt;How does DGC decide which edges and nodes to include in the diagram?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;#TraceabilitydiagramFAQ-CanIsetadifferenttraversalstrategy?&#39;&gt;Can I set a different traversal strategy? &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;#TraceabilitydiagramFAQ-Inadiagramview,Icanassigneachnodetoeitherthe&amp;#39;Flow&amp;#39;or&amp;#39;Context&amp;#39;layoutregion.Whatdoesthatdo?&#39;&gt;In a diagram view, I can assign each node to either the &amp;#39;Flow&amp;#39; or &amp;#39;Context&amp;#39; layout region. What does that do? &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;#TraceabilitydiagramFAQ-Amongthelistofdiagramlayoutoptions,&amp;#39;Flow/Context&amp;#39;seemstobespecial.Whatissospecialaboutit?&#39;&gt;Among the list of diagram layout options, &amp;#39;Flow/Context&amp;#39; seems to be special. What is so special about it? &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;#TraceabilitydiagramFAQ-CanIdirectadiagramviewtoshowcertainrelatedassetsas&amp;#39;boxesinboxes&amp;#39;?&#39;&gt;Can I direct a diagram view to show certain related assets as &amp;#39;boxes in boxes&amp;#39;?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/p&gt;&lt;h3 id=&quot;TraceabilitydiagramFAQ-HowdoesDGCselectthecolorofanode?&quot;&gt;How does DGC select the color of a node?&lt;/h3&gt;&lt;p&gt;A: The color of each node is automatically selected from a palette, based on the asset type or complex relation type. More specifically, they are based on the name and resource ID of the type. &lt;br /&gt;All assets of the same type have the same color across all diagrams. &lt;br /&gt;Since there are more asset types than colors in the palette, it may happen that, in the same diagram, nodes with two different types nevertheless have the same color. &lt;/p&gt;&lt;h3 id=&quot;TraceabilitydiagramFAQ-WhydoIseesomanydiagramviewsinthedropdownlist.Aretheyallapplicabletomyasset?&quot;&gt;Why do I see so many diagram views in the dropdown list. Are they all applicable to my asset? &lt;/h3&gt;&lt;p&gt;A: You see a diagram view in the dropdown list if it is applicable to the asset and if it has been shared with you. &lt;br /&gt;A diagram view is applicable to:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Each asset of any of the asset types that occur in the diagram view&lt;/li&gt;&lt;li&gt;Each asset of any child asset type of any of the types that occur in the diagram view&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br class=&quot;_mce_tagged_br&quot; /&gt;For example, consider this diagram view:&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;confluence-embedded-image&quot; width=&quot;700&quot; src=&quot;/download/attachments/13177156/45_diagram_view_business_lineage.png?version=1&amp;amp;modificationDate=1445257323898&amp;amp;api=v2&quot; data-image-src=&quot;/download/attachments/13177156/45_diagram_view_business_lineage.png?version=1&amp;amp;modificationDate=1445257323898&amp;amp;api=v2&quot;&gt;&lt;br /&gt;The following asset types occur in the diagram view: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Business Asset&lt;/li&gt;&lt;li&gt;Data Structure&lt;/li&gt;&lt;li&gt;Mapping Specification&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The diagram view applies to any asset of these types. A user can &#39;start anywhere&#39;, either from the asset page of a Business Asset, Data Structure or Mapping Specification.&lt;br /&gt;Not only that, but inheritance of asset types plays a role too. This view applies to any asset of a child asset type of any of the three asset types mentioned above. &lt;br /&gt;In &lt;strong&gt;Settings &amp;gt; Types &amp;gt; Asset types&lt;/strong&gt;, you can see the tree of asset types.  &lt;br /&gt;For example, Business Asset has the following child asset types.  &lt;br /&gt;&lt;img class=&quot;confluence-embedded-image confluence-thumbnail&quot; width=&quot;220&quot; src=&quot;/download/attachments/13177156/45_business_asset_child_classes.png?version=1&amp;amp;modificationDate=1445257323757&amp;amp;api=v2&quot; data-image-src=&quot;/download/attachments/13177156/45_business_asset_child_classes.png?version=1&amp;amp;modificationDate=1445257323757&amp;amp;api=v2&quot;&gt;&lt;br /&gt; The view is applicable to all of these, and to the child asset types of Data Structure and Mapping Specification as well. &lt;/p&gt;&lt;h3 id=&quot;TraceabilitydiagramFAQ-HowdoesDGCdecidewhichedgesandnodestoincludeinthediagram?&quot;&gt;How does DGC decide which edges and nodes to include in the diagram?&lt;/h3&gt;&lt;p&gt;A: DGC does not simply add all relations to the diagram, it has logic to decide which relations are relevant. This logic is called the &lt;em&gt;t&lt;/em&gt;&lt;em&gt;raversal strategy&lt;/em&gt;. &lt;br /&gt;To understand how this works, we need to differentiate between incoming edges and outgoing edges for a node, and between flow and context nodes. &lt;br /&gt;First look at flow only.  &lt;br /&gt;Consider the following simple diagram view:  &lt;/p&gt;&lt;p&gt;&lt;img class=&quot;confluence-embedded-image confluence-thumbnail&quot; width=&quot;300&quot; src=&quot;/download/attachments/13177156/Screen%20Shot%202015-08-13%20at%204.45.12%20pm.png?version=1&amp;amp;modificationDate=1445257324064&amp;amp;api=v2&quot; data-image-src=&quot;/download/attachments/13177156/Screen%20Shot%202015-08-13%20at%204.45.12%20pm.png?version=1&amp;amp;modificationDate=1445257324064&amp;amp;api=v2&quot;&gt;&lt;/p&gt;&lt;p&gt;From the start node, DGC adds all directed relations, and their nodes, whose relation type occurs in the view, both in upstream (incoming) and downstream (outgoing) direction. &lt;br /&gt;For each node that was added while traversing downstream, DGC adds all the downstream directed relations and nodes. After all, the upstream relations of a downstream node are irrelevant for the diagram of the start object.   &lt;br /&gt;Also for each upstream node that was added, DGC adds all the upstream directed relations and nodes. &lt;/p&gt;&lt;p&gt;In the diagram below, the above view has been applied to &lt;strong&gt;Four-wheel vehicle&lt;/strong&gt;, to reveal the &#39;Groups&#39; hierarchy. &lt;br /&gt;Any downstream node from an upstream node (i.e. &lt;strong&gt;Vehicle&lt;/strong&gt;, or &lt;strong&gt;Wheeled vehicle&lt;/strong&gt;) is irrelevant for this diagram. &lt;/p&gt;&lt;p&gt;&lt;img class=&quot;confluence-embedded-image&quot; width=&quot;800&quot; src=&quot;/download/attachments/13177156/example-diagram-vehicle.png?version=1&amp;amp;modificationDate=1445257324021&amp;amp;api=v2&quot; data-image-src=&quot;/download/attachments/13177156/example-diagram-vehicle.png?version=1&amp;amp;modificationDate=1445257324021&amp;amp;api=v2&quot;&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;But if we jump to &lt;strong&gt;Vehicle,&lt;/strong&gt; we get a different diagram: &lt;/p&gt;&lt;p&gt;&lt;img class=&quot;confluence-embedded-image&quot; width=&quot;800&quot; src=&quot;/download/attachments/13177156/example-diagram-vehicle-.png?version=1&amp;amp;modificationDate=1445257324008&amp;amp;api=v2&quot; data-image-src=&quot;/download/attachments/13177156/example-diagram-vehicle-.png?version=1&amp;amp;modificationDate=1445257324008&amp;amp;api=v2&quot;&gt;&lt;/p&gt;&lt;p&gt;Compared to the first diagram, the nodes that were upstream of &lt;strong&gt;Wheeled vehicle&lt;/strong&gt; are removed, and the downstream subtree for &lt;strong&gt;Two-wheel vehicle&lt;/strong&gt; was added.  &lt;/p&gt;&lt;h3 id=&quot;TraceabilitydiagramFAQ-CanIsetadifferenttraversalstrategy?&quot;&gt;Can I set a different traversal strategy? &lt;/h3&gt;&lt;p&gt;All examples in this chapter, unless mentioned otherwise, use the default traversal strategy. We call this the &lt;em&gt;directed traversal strategy&lt;/em&gt;, and could be paraphrased as &#39;keep on walking and don&#39;t look back&#39;. &lt;br /&gt;You can also switch the traversal strategy to &lt;em&gt;complete graph&lt;/em&gt;, by always looking in all directions. Depending on your data, this could obviously lead to a much bigger diagram, with more nodes and edges.&lt;br /&gt;&lt;br /&gt;Going back to the above example and applying that strategy results in the following diagram: &lt;/p&gt;&lt;p&gt; &lt;img class=&quot;confluence-embedded-image&quot; width=&quot;800&quot; src=&quot;/download/attachments/13177156/completeGraph.png?version=1&amp;amp;modificationDate=1445257323993&amp;amp;api=v2&quot; data-image-src=&quot;/download/attachments/13177156/completeGraph.png?version=1&amp;amp;modificationDate=1445257323993&amp;amp;api=v2&quot;&gt;&lt;br /&gt;&lt;br /&gt;Note the new upstream branch of &lt;strong&gt;Wheeled vehicle&lt;/strong&gt;, which is downstream from the start node. An upstream node in that branch, &lt;strong&gt;Wheeled object&lt;/strong&gt;, has a downstream branch: &lt;strong&gt;Ferris wheel&lt;/strong&gt;. &lt;br /&gt;&lt;br /&gt;You can switch the traversal strategy in the JSON form of the diagram view by adding the following name/value pair to the top-level diagram section&lt;/p&gt;&lt;pre&gt;&amp;quot;visitStrategy&amp;quot;: &amp;quot;completeGraph&amp;quot;&lt;/pre&gt;&lt;h3 id=&quot;TraceabilitydiagramFAQ-Inadiagramview,Icanassigneachnodetoeitherthe&amp;#39;Flow&amp;#39;or&amp;#39;Context&amp;#39;layoutregion.Whatdoesthatdo?&quot;&gt;In a diagram view, I can assign each node to either the &#39;Flow&#39; or &#39;Context&#39; layout region. What does that do? &lt;/h3&gt;&lt;p&gt;A: The default traversal strategy (&#39;keep on walking and don&#39;t look back&#39;) gives the required results when you depict a set of assets that are related through some kind of (data) flow or dependency. But when the relation represents a link to &lt;em&gt;context&lt;/em&gt; rather than &lt;em&gt;flow&lt;/em&gt;, the edge between two nodes should always be traversed, even if the related node is upstream of a downstream node, or vice versa. You can also regard an edge between a flow node and a context node as &lt;em&gt;bidirectional: &lt;/em&gt;it is always traversed.  &lt;/p&gt;&lt;p&gt;This notion will become clearer when you look at the example below. &lt;br /&gt;When the flow depicts transformations of table columns, the tables that contain the columns, and the business terms that are related to them, provide context to the columns. The context nodes are always relevant, regardless of whether the column was encountered while going upstream or downstream. The context nodes are always added to the diagram. &lt;br /&gt;For this traversal strategy, you can assign a node in the diagram view to be a &#39;context&#39; node. &lt;/p&gt;&lt;p&gt;Consider the following example diagram view:&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;confluence-embedded-image&quot; width=&quot;700&quot; src=&quot;/download/attachments/13177156/45_flow_view1.png?version=1&amp;amp;modificationDate=1445257323954&amp;amp;api=v2&quot; data-image-src=&quot;/download/attachments/13177156/45_flow_view1.png?version=1&amp;amp;modificationDate=1445257323954&amp;amp;api=v2&quot;&gt;&lt;/p&gt;&lt;p&gt;This view contains flow only. &lt;/p&gt;&lt;p&gt;An example diagram for this view is below: &lt;br /&gt;&lt;img class=&quot;confluence-embedded-image&quot; width=&quot;900&quot; src=&quot;/download/attachments/13177156/45_flow_diagram1.png?version=1&amp;amp;modificationDate=1445257323913&amp;amp;api=v2&quot; data-image-src=&quot;/download/attachments/13177156/45_flow_diagram1.png?version=1&amp;amp;modificationDate=1445257323913&amp;amp;api=v2&quot;&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;We started from the asset in the middle (&lt;strong&gt;Order amount USD&lt;/strong&gt;).&lt;/p&gt;&lt;p&gt;Now assume that you also want to see to which tables these columns belong. &lt;br /&gt;You could add a relation from column to table to the view (in other words, a downstream edge), but this relation would only be considered on the downstream side, and if we add the column/table relation in the reverse direction, it would only be considered on the upstream side. To solve this problem, we designate the Table as a &lt;em&gt;context&lt;/em&gt; node, so that the relation from Column to Table is always traversed, both for Columns that are upstream as well as downstream. &lt;/p&gt;&lt;p&gt;&lt;img class=&quot;confluence-embedded-image&quot; width=&quot;700&quot; src=&quot;/download/attachments/13177156/45_flow_view2.png?version=1&amp;amp;modificationDate=1445257323967&amp;amp;api=v2&quot; data-image-src=&quot;/download/attachments/13177156/45_flow_view2.png?version=1&amp;amp;modificationDate=1445257323967&amp;amp;api=v2&quot;&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;Resulting in the diagram below: &lt;br /&gt;&lt;img class=&quot;confluence-embedded-image&quot; width=&quot;900&quot; src=&quot;/download/attachments/13177156/45_flow_diagram2.png?version=1&amp;amp;modificationDate=1445257323925&amp;amp;api=v2&quot; data-image-src=&quot;/download/attachments/13177156/45_flow_diagram2.png?version=1&amp;amp;modificationDate=1445257323925&amp;amp;api=v2&quot;&gt; &lt;/p&gt;&lt;p&gt;Both upstream and downstream Columns show the Table that contains them. The edge from Column to Table was always traversed. &lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;h3 id=&quot;TraceabilitydiagramFAQ-Amongthelistofdiagramlayoutoptions,&amp;#39;Flow/Context&amp;#39;seemstobespecial.Whatissospecialaboutit?&quot;&gt;Among the list of diagram layout options, &#39;Flow/Context&#39; seems to be special. What is so special about it? &lt;/h3&gt;&lt;p&gt;A: Indeed, &#39;Flow/Context&#39; is a special layout, with specific behavior.&lt;br /&gt;If you set the diagram layout to &#39;Flow/Context&#39;, the flow nodes (nodes that are in the &#39;Flow&#39; layout region) are depicted as a left-to-right hierarchy in the lower half of the diagram and the context nodes are all in the top half of the diagram. &lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;h3 id=&quot;TraceabilitydiagramFAQ-CanIdirectadiagramviewtoshowcertainrelatedassetsas&amp;#39;boxesinboxes&amp;#39;?&quot;&gt;&lt;strong&gt;Can I direct a diagram view to show certain related assets as &#39;boxes in boxes&#39;?&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;A: Yes. For example, you can further enhance the layout of the above diagram by depicting the Table as a box around its columns: &lt;/p&gt;&lt;p&gt;&lt;img class=&quot;confluence-embedded-image&quot; width=&quot;700&quot; src=&quot;/download/attachments/13177156/45_flow_view3.png?version=1&amp;amp;modificationDate=1445257323979&amp;amp;api=v2&quot; data-image-src=&quot;/download/attachments/13177156/45_flow_view3.png?version=1&amp;amp;modificationDate=1445257323979&amp;amp;api=v2&quot;&gt;&lt;/p&gt;&lt;p&gt;You can achieve this view by editing the view in JSON form. In the section for the edge from Table Column to Database Table, you add the following name/value pair: &lt;/p&gt;&lt;pre&gt;&amp;quot;style&amp;quot;: &amp;quot;reversed-box&amp;quot;&lt;/pre&gt;&lt;p&gt;This view results in below diagram: &lt;/p&gt;&lt;p&gt;&lt;img class=&quot;confluence-embedded-image&quot; width=&quot;900&quot; src=&quot;/download/attachments/13177156/45_flow_diagram3.png?version=1&amp;amp;modificationDate=1445257323940&amp;amp;api=v2&quot; data-image-src=&quot;/download/attachments/13177156/45_flow_diagram3.png?version=1&amp;amp;modificationDate=1445257323940&amp;amp;api=v2&quot;&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;Note that the flow is no longer purely left to right. The Order-tbl contains both columns that are a source, as well as columns that are a target. &lt;br /&gt;To keep all columns of Order-tbl in a single box in the middle of the diagram, one arrow now goes from right to left. &lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt; &lt;/p&gt;
    </body>
</html>